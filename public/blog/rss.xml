<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Matyas Fodor - Yet another JS blog</title>
        <link>https://matyasfodor.com</link>
        <description>This is my personal feed about my endeavours in the word of web development</description>
        <lastBuildDate>Sat, 13 Jul 2013 22:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <copyright>All rights reserved 2021, Matyas Fodor</copyright>
        <item>
            <title><![CDATA[Efficient zip function in JavaScript]]></title>
            <link>https://matyasfodor.com/blog/efficient-zip</link>
            <guid isPermaLink="false">https://matyasfodor.com/blog/efficient-zip</guid>
            <pubDate>Sun, 14 Nov 2021 00:46:07 GMT</pubDate>
            <content:encoded><![CDATA[<h1>Efficient zip function in JavaScript</h1>
<h2>What&#x27;s the Python zip function?</h2>
<p>The Python <code>zip</code> function is a clever analogy of a real zipper: It allows iterating over multiple arrays element-wise without having to manage the indices. It is quite handy when you have to manually pair elements coming from two (or more) data sources:</p>
<pre><code class="language-python">&gt;&gt;&gt; scoreList = [5, 3, 6, 8]
&gt;&gt;&gt; playerList = [&#x27;Mary&#x27;, &#x27;John&#x27;, &#x27;Emma&#x27;, &#x27;Gavin&#x27;]
&gt;&gt;&gt; list(zip(scoreList, playerList))
# [(5, &#x27;Mary&#x27;), (3, &#x27;John&#x27;), (6, &#x27;Emma&#x27;), (8, &#x27;Gavin&#x27;)]
</code></pre>
<p>Please note the <code>list()</code> call is needed to convert the result to a list, otherwise it returns something like</p>
<pre><code class="language-python">&gt;&gt;&gt; zip(scoreList, playerList)
# &lt;zip object at 0x109b19d00&gt;
</code></pre>
<p>which is an object implementing the iterator interface. Why the hassle with this iterator object? Why is it not just a list? The iterator interface allows lazy-evaluation, meaning it won&#x27;t create a list, only if it&#x27;s asked for. Instead, this object allows generating elements on-demand, which can be more efficient. Let&#x27;s say I want to find the first player with score 6:</p>
<pre><code class="language-python">for score, player in zip(scoreList, playerList):
  if score == 6:
    print(f&#x27;player {player} has score 6&#x27;)
    break
</code></pre>
<p>In this case, the iteration stops with (<code>(6, &#x27;Emma&#x27;)</code>) and the last pair (<code>(8, &#x27;Gavin&#x27;)</code>) would never be constructed.</p>
<p>The <code>zip</code> not only works with two lists, it can take more arrays as input parameters. This can be particularly useful, when trying to transpose a list of lists (a matrix). If you&#x27;re not familiar with the term <code>transpose</code>, it simply means a list of list is simply flipped by its diagonal. The transposition of</p>
<pre><code class="language-python">[
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
]
</code></pre>
<p>is</p>
<pre><code class="language-python">&gt;&gt;&gt; list(zip(*[
...  [1, 2, 3],
...  [4, 5, 6],
...  [7, 8, 9]
... ]))
[
  [1, 4, 7],
  [2, 5, 8],
  [3, 6, 9]
]
</code></pre>
<p>What happens if the input arrays do not have the same length? According to the <a href="https://docs.python.org/3.3/library/functions.html#zip">Python docs</a> it <em>stops when the shortest input iterable is exhausted</em>, meaning it will return as many elements as long the shortest array is:</p>
<pre><code class="language-python">&gt;&gt;&gt; list(zip([1, 2, 3], [4, 5]))
[(1, 4), (2, 5)]
</code></pre>
<p>If all elements need to be returned, <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest">itertools.zip_longest</a> should be used.</p>
<p>And just to spice things up the little, let me mention that as the <code>zip</code> function expects iterables as input, not specifically arrays. Iterables are more generic than arrays, without going too much into the details, they are objects that can be iterated over one element at the time, and they can signal if they are exhausted (iteration finished). In practice, it means that any object that can be iterated over can be used as inputs of zip: tuples, sets, dictionaries, range, or even results of other zips. Mind-blowing, right? ðŸ¤¯ It is also possible to create an infinite zip. Let me use <a href="https://docs.python.org/3/library/itertools.html#itertools.count">itertools.count</a> to demonstrate it. It is very similar to <code>range()</code> except it has no stopping criteria, so if it is used in a for loop it keeps yielding values unless it is stopped.</p>
<pre><code class="language-python">&gt;&gt;&gt; for a, b in zip(itertools.count(start=0, step=2), itertools.count(start=1, step=2)):
...     print(a, b)
1 2
3 4
5 6
...
</code></pre>
<p>I really hope I could convince you by now, how cool and versatile this Python standard library function is. Why can&#x27;t we have nice things in JavaScript? Well we can, you just probably end up hunting for third-parties on npm<sup><a href="#jump-1">1</a></sup> or ready-made solutions on Stack Overflow. But is there anything more satisfying than using your home-grown utilities?</p>
<h2><span id="how-javascript-could-do-it">The zip function in JavaScript</span></h2>
<p>Before jumping into the implementation, let&#x27;s take a detour and inspect the differences between the Python and the JavaScript iterator interface.</p>
<p>In Python you can do:</p>
<pre><code class="language-python">&gt;&gt;&gt; my_list = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]
&gt;&gt;&gt; my_list_iterator = iter(my_list)
&gt;&gt;&gt; next(my_list_iterator)
&#x27;a&#x27;
&gt;&gt;&gt; next(my_list_iterator)
&#x27;b&#x27;
&gt;&gt;&gt; next(my_list_iterator)
&#x27;c&#x27;
&gt;&gt;&gt; next(my_list_iterator)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
StopIteration
</code></pre>
<p>The iterator of an iterable object can be obtained with the global <code>iter()</code> function, and the also globally available <code>next()</code> function can be used to fetch the current value and increment the iterator. The end of the iteration is signaled by the <code>StopIteration</code> exception. The Python iterator mechanism is built with the side-effect of raising an error, which happens under the hood in every for-loop. This allows a very ergonomic workflow, although it might seem unorthodox to make use of exceptions in the expected behaviour of the code flow.</p>
<p>How would this look like in JavaScript?</p>
<pre><code class="language-javascript">&gt; var myList = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];
&gt; var myListIterator = myList[Symbol.iterator]();
&gt; myListIterator.next();
{ value: &#x27;a&#x27;, done: false }
&gt; myListIterator.next();
{ value: &#x27;b&#x27;, done: false }
&gt; myListIterator.next();
{ value: &#x27;c&#x27;, done: false }
&gt; myListIterator.next();
{ value: undefined, done: true }
</code></pre>
<p>In JavaScript, in contrast to Python, there&#x27;s no global function to get an iterator of an object. It can be obtained with the <code>myList[Symbol.iterator]()</code>. The current value can be accessed and the iterator incremented with the <code>iterator.next()</code> method, which returns an object with two properties: <code>value</code> holds the current value and a <code>done</code> indicates the status of the iteration. When the iteration finishes, <code>value</code> is <code>undefined</code> and <code>done</code> is <code>true</code>. This interface can be somewhat more invconvenient to work with but this is a trade-off of not signaling the end-of-iteration state with an exception.</p>
<p>With the iterator interface under our belt, we can design a faithful implementation of the Python <code>zip</code> and <code>itertools.zip_longest</code> functions in JavaScript. Let&#x27;s focus on supporting two elements first and stop as soon as one of the iterators is exhausted:</p>
<pre><code class="language-javascript">function zip(iterableA, iterableB) {
  // Get the iterators
  const iteratorA = iterableA[Symbol.iterator]();
  const iteratorB = iterableB[Symbol.iterator]();
  // Keep track of the current iteration state in `iterStateA` and `iterStateB`
  let iterStateA = iteratorA.next();
  let iterStateB = iteratorB.next();
  // result will hold the return values;
  const result = [];
  // Loop until none of the iterators are exhausted
  while (!iterStateA.done &amp;&amp; !iterStateB.done) {
    // The current values of the iterators are stored in result
    result.push([iterStateA.value, iterStateB.value]);
    // The current iterator state is updated from the iterator
    iterStateA = iteratorA.next();
    iterStateB = iteratorB.next();
  }
  return result;
}
</code></pre>
<p>It seems to be working as expected:</p>
<pre><code class="language-javascript">&gt; zip([1, 2, 3, 4], [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])
[ [ 1, &#x27;a&#x27; ], [ 2, &#x27;b&#x27; ], [ 3, &#x27;c&#x27; ] ]
</code></pre>
<p>So far so good, but this implementation is eagerly-evaluated, which means no partial results are returned, both iterators are completely exhausted before the function returns. Lazy evaluation on the other hand requires returning partial results, that&#x27;s where <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator">generator</a> functions come handy. It&#x27;s quite simple to change the previous implementation, a <code>*</code> needs to be added after the <code>function</code> keyword and instead of storing partial results to <code>results</code> they can be yielded:</p>
<pre><code class="language-javascript">function* zip(iterableA, iterableB) {
  // Get the iterators
  const iteratorA = iterableA[Symbol.iterator]();
  const iteratorB = iterableB[Symbol.iterator]();
  // Keep track of the current iteration state in `iterStateA` and `iterStateB`
  let iterStateA = iteratorA.next();
  let iterStateB = iteratorB.next();
  // Loop until none of the iterators are exhausted
  while (!iterStateA.done &amp;&amp; !iterStateB.done) {
    // The current values of the iterators are yielded
    yield [iterStateA.value, iterStateB.value];
    // The current iterator state is updated from the iterator
    iterStateA = iteratorA.next();
    iterStateB = iteratorB.next();
  }
}
</code></pre>
<p>The same call to <code>zip</code> would now return a generator object:</p>
<pre><code class="language-javascript">&gt; zip([1, 2, 3, 4], [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])
Object [Generator] {}
</code></pre>
<p>The actual results can be viewed by turning these results into an array with the <code>Array.from</code> method:</p>
<pre><code class="language-javascript">&gt; Array.from(zip([1, 2, 3, 4], [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]))
[ [ 1, &#x27;a&#x27; ], [ 2, &#x27;b&#x27; ], [ 3, &#x27;c&#x27; ] ]
</code></pre>
<p>The implementation is getting really close to the Python one, but it still only supports two arrays. How could it be extended to work with an arbitrary number of arrays? The parameters of the function would have to be rolled up into a single <code>iterables</code> parameter, using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters">rest parameters</a>. Each operation on the iterators or on the iterStates is now wrapped in a map, except from the condition of the loop, which uses <code>every</code> to check if any of the iterators are exhausted.</p>
<pre><code class="language-javascript">function* zip(...iterables) {
  // Get the iterators
  const iterators = iterables.map((iterable) =&gt; iterable[Symbol.iterator]());
  // Keep track of the current iteration state in `iterStates`
  let iterStates = iterators.map((iterator) =&gt; iterator.next());
  // Loop until none of the iterators are exhausted
  while (iterStates.every(({ done }) =&gt; !done)) {
    // The current values of the iterators are yielded
    yield iterStates.map(({ value }) =&gt; value);
    // The current iterator states are updated from the iterator
    iterStates = iterators.map((iterator) =&gt; iterator.next());
  }
}
</code></pre>
<p>Matrix transposition is no longer an issue for <code>zip</code>:</p>
<pre><code class="language-javascript">&gt; Array.from(zip(...[
...   [1, 2, 3],
...   [4, 5, 6],
...   [7, 8, 9]
... ]))
[ [ 1, 4, 7 ], [ 2, 5, 8 ], [ 3, 6, 9 ] ]
</code></pre>
<p>What would it take to also implement the <code>zip_longest</code> functionality? Let&#x27;s change the implementation, such that there will be a <code>zip</code> and a <code>zip_longest</code> function exposed (exported), and an internal <code>_zip</code> function will capture the common functionality.</p>
<pre><code class="language-javascript">function* _zip(evaluator, iterables) {
  // Get the iterators
  const iterators = iterables.map((iterable) =&gt; iterable[Symbol.iterator]());
  // Keep track of the current iteration state in `iterStates`
  let iterStates = iterators.map((iterator) =&gt; iterator.next());
  // Loop until none of the iterators are exhausted
  while (evaluator.call(iterStates, ({ done }) =&gt; !done)) {
    // The current values of the iterators are yielded
    yield iterStates.map(({ value }) =&gt; value);
    // The current iterator states are updated from the iterator
    iterStates = iterators.map((iterator) =&gt; iterator.next());
  }
}

function* zip(...iterables) {
  yield* _zip(Array.prototype.every, iterables);
}

function* zipLongest(...iterables) {
  yield* _zip(Array.prototype.some, iterables);
}
</code></pre>
<pre><code class="language-javascript">&gt; Array.from(zip(...[[1, 2, 3, 4, 5], [1, 2, 3], [1, 3, 6, 8]]))
[ [ 1, 1, 1 ], [ 2, 2, 3 ], [ 3, 3, 6 ] ]
&gt; Array.from(zip_longest(...[[1, 2, 3, 4, 5], [1, 2, 3], [1, 3, 6, 8]]))
[
  [ 1, 1, 1 ],
  [ 2, 2, 3 ],
  [ 3, 3, 6 ],
  [ 4, undefined, 8 ],
  [ 5, undefined, undefined ]
]
</code></pre>
<p>And to reach feature parity with <code>zip_longest</code>, let&#x27;s also add the <code>fillValue</code>:</p>
<pre><code class="language-javascript">function* _zip(evaluator, iterables, fillValue) {
  // Get the iterators
  const iterators = iterables.map((iterable) =&gt; iterable[Symbol.iterator]());
  // Keep track of the current iteration state in `iterStates`
  let iterStates = iterators.map((iterator) =&gt; iterator.next());
  // Loop until none of the iterators are exhausted
  while (evaluator.call(iterStates, ({ done }) =&gt; !done)) {
    // The current values of the iterators are yielded
    yield iterStates.map(({ value, done }) =&gt; (!done ? value : fillValue));
    // The current iterator states are updated from the iterator
    iterStates = iterators.map((iterator) =&gt; iterator.next());
  }
}

function* zip(...iterables) {
  yield* _zip(Array.prototype.every, iterables);
}

function* zipLongest(...iterables) {
  yield* _zip(Array.prototype.some, iterables);
}

function* zipLongestFill(fillValue = undefined, ...iterables) {
  yield* _zip(Array.prototype.some, iterables, fillValue);
}
</code></pre>
<pre><code class="language-javascript">&gt; Array.from(zipLongestFill(&#x27;a&#x27;, ...[[1,2,3,4,5],[1,2,3],[1,3,6,8]]))
[
  [ 1, 1, 1 ],
  [ 2, 2, 3 ],
  [ 3, 3, 6 ],
  [ 4, &#x27;a&#x27;, 8 ],
  [ 5, &#x27;a&#x27;, &#x27;a&#x27; ]
]
</code></pre>
<p>Thank you very much for reading my post. In case you have any suggestions or questions, ping me on Twitter!</p>
<hr/>
<p><span id="jump-1">1,</span>
The <code>zip</code> function is available in the most popular utility library, Lodash, as <code>_.zip</code>. There are two problems with the Lodash implementation:</p>
<ul>
<li>It implicitly implements the <code>itertools.zip_longest</code> functionality without documenting it, or offering a padding value.</li>
<li>Not necessarily a problem, but it only operates on arrays and returns an array without any lazy evaluation. This probably serves an average JavaScript user, but not if you&#x27;re hungry for scalability and performance.</li>
</ul>]]></content:encoded>
        </item>
    </channel>
</rss>